Spring을 이용한 AOP(관점지향적) 프로그래밍 = 3-3
-----------------------------------------------
AOP(Aspect Oriented Programing) : 
 여러 클래스로 분산된 책임(기능)을 별도의 관점으로 분리/캡슐화 하는  프로그래밍 방법
 ==> 횡단 관심사
 
용어
Aspect : 여러 객체에 공통으로 적용되는 관심사항
   Before Advice : 대상 객체의 메소드 호출 전에 공통 기능 실행

   After Runing Advice : 대상 객체의 메소드가 예외 없이 실행된 이후에 공통 기능 실행

   After Throwing Advice : 대상 객체의 메소드를 실행하는 도중 예외발생시 공통 기능 실행

   After Advice : 대상 객체의 메서드 실행 후 공통 기능 실행

   Around Advice : 대상 객체의 메소드 실행 전, 후 또는 예외 발생 시점에 공통 기능 실행
   

Advice : 공통 관심 기능을 언제 핵심 로직에 적용할지 정의
  (ex : 메소드 호출 전에 공통 관심 기능을 호출한다)

JoinPoint : Advice가 적용될 시점/지점(메소드)

PointCut : joinpoint의 식별을 정의(어떤 메소드에….)

Weaving : Advice(Aspect)를 핵심 로직 코드에 삽입하는 것

Advisor : Advice를 지칭(spring aop에서만 사용하는 개념)

Proxy : 핵심 기능을 구현한 객체에 advice가 적용된 객체

////////////////////////////////////////////////////////////////////

Advice : 공통의 관심사항 - 횡단 관심사항
	spring Advice : before
					after
					around
					afterReturning
					afterThrowing
	스프링 AOP 에서는 메서드 실행 전후로만 advice 등록이 가능하다.

PointCut : Advice 적용할 메서드를 식별정의

public List<String> 패키지.클래스.getUserPagingList(PageVo pageVo) throws Exception //일반적인 형태의 메서드

접근제어자 : 스프링에서는 public 메소드만 허용, 옵션(생략 가능)
예외 : 생략 가능
execution(* kr.or.ddit..service.*.*(..))
									인자값 

kr.or.ddit.member.service



==> service 패키지에 있는 모든 클래스의 메서드가 실행될때 --> pointCut
		Profiling (시간 측정)


aop란 ?
	oop의 대체제가 아닌 oop를 보완하는 프로그래밍 기법













